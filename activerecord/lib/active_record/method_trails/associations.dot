digraph untitled
{
  graph [size=7.5,10];
  graph [center=1];
  graph [fontname=Arial];
  graph [overlap=false];
  graph [ratio=compress];
  node [style=filled];
  node [fillcolor="#DDDDDD"]
  node [fontname=Arial];
  node [fontsize=10];
  edge [fontname=Arial];
  edge [fontsize=10];

  /* Classes and their Instance Methods */
  subgraph cluster_1 {
    label="JoinDependency";
    color=blue;
    "initialize" [color=green];
    "join_associations" [color=green];
    "join_base" [color=green];
    "instantiate" [color=green];
    "remove_duplicate_results!" [color=green];
    "join_for_table_name" [color=green];
    "joins_for_table_name" [color=green];
    "build" [color=green];
    "build_join_association" [color=green];
    "construct" [color=green];
    "construct_association" [color=green];
    "initialize" [color=green];
    "aliased_prefix" [color=green];
    "aliased_primary_key" [color=green];
    "aliased_table_name" [color=green];
    "column_names_with_alias" [color=green];
    "extract_record" [color=green];
    "record_id" [color=green];
    "instantiate" [color=green];
    "initialize" [color=green];
    "association_join" [color=green];
    "aliased_table_name_for" [color=green];
    "pluralize" [color=green];
    "table_alias_for" [color=green];
    "table_name_and_alias" [color=green];
    "interpolate_sql" [color=green];
    "join_type" [color=green];
  }
  subgraph cluster_2 {
    label="JoinBase";
    color=blue;
    "initialize" [color=green];
    "aliased_prefix" [color=green];
    "aliased_primary_key" [color=green];
    "aliased_table_name" [color=green];
    "column_names_with_alias" [color=green];
    "extract_record" [color=green];
    "record_id" [color=green];
    "instantiate" [color=green];
  }
  
  "initialize" -> "reflection";
  "initialize" -> "options";
  "initialize" -> "through";
  "initialize" -> "inspect";
  "initialize" -> "owner_class_name";
  "initialize" -> "owner_class_name";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "source_reflection";
  "initialize" -> "class_name";
  "initialize" -> "source_reflection";
  "initialize" -> "name";
  "initialize" -> "owner_class_name";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "class_name";
  "initialize" -> "source_reflection";
  "initialize" -> "name";
  "initialize" -> "through_reflection";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "source_reflection_names";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection_names";
  "initialize" -> "source_associations";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "klass";
  "initialize" -> "reflect_on_all_associations";
  "initialize" -> "collect";
  "initialize" -> "a";
  "initialize" -> "a";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "initialize" -> "source_reflection_names";
  "initialize" -> "collect";
  "initialize" -> "inspect";
  "initialize" -> "to_sentence";
  "initialize" -> "connector";
  "initialize" -> "through_reflection";
  "initialize" -> "klass";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "initialize" -> "through_reflection";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "initialize" -> "source_associations";
  "initialize" -> "to_sentence";
  "initialize" -> "connector";
  "initialize" -> "through_reflection";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "macro";
  "initialize" -> "source_reflection";
  "initialize" -> "options";
  "initialize" -> "through";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "initialize" -> "through_reflection";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "initialize" -> "owner";
  "initialize" -> "class";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "class_name";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "class_name";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "macro";
  "initialize" -> "owner";
  "initialize" -> "class";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "class_name";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "name";
  "initialize" -> "owner";
  "initialize" -> "class";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "class_name";
  "initialize" -> "reflection";
  "initialize" -> "source_reflection";
  "initialize" -> "name";
  "initialize" -> "reflection";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "name";
  "initialize" -> "inspect";
  "clear_association_cache" -> "new_record?";
  "clear_association_cache" -> "class";
  "clear_association_cache" -> "reflect_on_all_associations";
  "clear_association_cache" -> "to_a";
  "clear_association_cache" -> "each";
  "clear_association_cache" -> "assoc";
  "clear_association_cache" -> "instance_variable_set";
  "clear_association_cache" -> "assoc";
  "clear_association_cache" -> "name";
  "has_many" -> "reflection";
  "has_many" -> "create_has_many_reflection";
  "has_many" -> "association_id";
  "has_many" -> "options";
  "has_many" -> "extension";
  "has_many" -> "configure_dependency_for_has_many";
  "has_many" -> "reflection";
  "has_many" -> "add_multiple_associated_save_callbacks";
  "has_many" -> "reflection";
  "has_many" -> "name";
  "has_many" -> "add_association_callbacks";
  "has_many" -> "reflection";
  "has_many" -> "name";
  "has_many" -> "reflection";
  "has_many" -> "options";
  "has_many" -> "options";
  "has_many" -> "through";
  "has_many" -> "collection_accessor_methods";
  "has_many" -> "reflection";
  "has_many" -> "collection_accessor_methods";
  "has_many" -> "reflection";
  "has_one" -> "options";
  "has_one" -> "through";
  "has_one" -> "reflection";
  "has_one" -> "create_has_one_through_reflection";
  "has_one" -> "association_id";
  "has_one" -> "options";
  "has_one" -> "association_accessor_methods";
  "has_one" -> "reflection";
  "has_one" -> "reflection";
  "has_one" -> "create_has_one_reflection";
  "has_one" -> "association_id";
  "has_one" -> "options";
  "has_one" -> "ivar";
  "has_one" -> "reflection";
  "has_one" -> "name";
  "has_one" -> "method_name";
  "has_one" -> "reflection";
  "has_one" -> "name";
  "has_one" -> "to_sym";
  "has_one" -> "define_method";
  "has_one" -> "method_name";
  "has_one" -> "instance_variable_defined?";
  "has_one" -> "ivar";
  "has_one" -> "association";
  "has_one" -> "instance_variable_get";
  "has_one" -> "ivar";
  "has_one" -> "association";
  "has_one" -> "nil?";
  "has_one" -> "new_record?";
  "has_one" -> "association";
  "has_one" -> "new_record?";
  "has_one" -> "association";
  "has_one" -> "reflection";
  "has_one" -> "primary_key_name";
  "has_one" -> "id";
  "has_one" -> "association";
  "has_one" -> "reflection";
  "has_one" -> "primary_key_name";
  "has_one" -> "id";
  "has_one" -> "association";
  "has_one" -> "save";
  "has_one" -> "after_save";
  "has_one" -> "method_name";
  "has_one" -> "add_single_associated_save_callbacks";
  "has_one" -> "reflection";
  "has_one" -> "name";
  "has_one" -> "association_accessor_methods";
  "has_one" -> "reflection";
  "has_one" -> "association_constructor_method";
  "has_one" -> "build";
  "has_one" -> "reflection";
  "has_one" -> "association_constructor_method";
  "has_one" -> "create";
  "has_one" -> "reflection";
  "has_one" -> "configure_dependency_for_has_one";
  "has_one" -> "reflection";
  "belongs_to" -> "reflection";
  "belongs_to" -> "create_belongs_to_reflection";
  "belongs_to" -> "association_id";
  "belongs_to" -> "options";
  "belongs_to" -> "ivar";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "reflection";
  "belongs_to" -> "options";
  "belongs_to" -> "polymorphic";
  "belongs_to" -> "association_accessor_methods";
  "belongs_to" -> "reflection";
  "belongs_to" -> "method_name";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "to_sym";
  "belongs_to" -> "define_method";
  "belongs_to" -> "method_name";
  "belongs_to" -> "instance_variable_defined?";
  "belongs_to" -> "ivar";
  "belongs_to" -> "association";
  "belongs_to" -> "instance_variable_get";
  "belongs_to" -> "ivar";
  "belongs_to" -> "association";
  "belongs_to" -> "association";
  "belongs_to" -> "target";
  "belongs_to" -> "association";
  "belongs_to" -> "new_record?";
  "belongs_to" -> "association";
  "belongs_to" -> "save";
  "belongs_to" -> "association";
  "belongs_to" -> "updated?";
  "belongs_to" -> "reflection";
  "belongs_to" -> "primary_key_name";
  "belongs_to" -> "association";
  "belongs_to" -> "id";
  "belongs_to" -> "reflection";
  "belongs_to" -> "options";
  "belongs_to" -> "foreign_type";
  "belongs_to" -> "association";
  "belongs_to" -> "class";
  "belongs_to" -> "base_class";
  "belongs_to" -> "name";
  "belongs_to" -> "to_s";
  "belongs_to" -> "before_save";
  "belongs_to" -> "method_name";
  "belongs_to" -> "association_accessor_methods";
  "belongs_to" -> "reflection";
  "belongs_to" -> "association_constructor_method";
  "belongs_to" -> "build";
  "belongs_to" -> "reflection";
  "belongs_to" -> "association_constructor_method";
  "belongs_to" -> "create";
  "belongs_to" -> "reflection";
  "belongs_to" -> "method_name";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "to_sym";
  "belongs_to" -> "define_method";
  "belongs_to" -> "method_name";
  "belongs_to" -> "instance_variable_defined?";
  "belongs_to" -> "ivar";
  "belongs_to" -> "association";
  "belongs_to" -> "instance_variable_get";
  "belongs_to" -> "ivar";
  "belongs_to" -> "association";
  "belongs_to" -> "nil?";
  "belongs_to" -> "association";
  "belongs_to" -> "new_record?";
  "belongs_to" -> "association";
  "belongs_to" -> "save";
  "belongs_to" -> "association";
  "belongs_to" -> "updated?";
  "belongs_to" -> "reflection";
  "belongs_to" -> "primary_key_name";
  "belongs_to" -> "association";
  "belongs_to" -> "id";
  "belongs_to" -> "before_save";
  "belongs_to" -> "method_name";
  "belongs_to" -> "options";
  "belongs_to" -> "counter_cache";
  "belongs_to" -> "cache_column";
  "belongs_to" -> "options";
  "belongs_to" -> "counter_cache";
  "belongs_to" -> "to_s";
  "belongs_to" -> "underscore";
  "belongs_to" -> "pluralize";
  "belongs_to" -> "options";
  "belongs_to" -> "counter_cache";
  "belongs_to" -> "method_name";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "to_sym";
  "belongs_to" -> "define_method";
  "belongs_to" -> "method_name";
  "belongs_to" -> "association";
  "belongs_to" -> "send";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "association";
  "belongs_to" -> "nil?";
  "belongs_to" -> "association";
  "belongs_to" -> "class";
  "belongs_to" -> "increment_counter";
  "belongs_to" -> "cache_column";
  "belongs_to" -> "send";
  "belongs_to" -> "reflection";
  "belongs_to" -> "primary_key_name";
  "belongs_to" -> "after_create";
  "belongs_to" -> "method_name";
  "belongs_to" -> "method_name";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "to_sym";
  "belongs_to" -> "define_method";
  "belongs_to" -> "method_name";
  "belongs_to" -> "association";
  "belongs_to" -> "send";
  "belongs_to" -> "reflection";
  "belongs_to" -> "name";
  "belongs_to" -> "association";
  "belongs_to" -> "nil?";
  "belongs_to" -> "association";
  "belongs_to" -> "class";
  "belongs_to" -> "decrement_counter";
  "belongs_to" -> "cache_column";
  "belongs_to" -> "send";
  "belongs_to" -> "reflection";
  "belongs_to" -> "primary_key_name";
  "belongs_to" -> "before_destroy";
  "belongs_to" -> "method_name";
  "belongs_to" -> "module_eval";
  "belongs_to" -> "reflection";
  "belongs_to" -> "class_name";
  "belongs_to" -> "cache_column";
  "belongs_to" -> "reflection";
  "belongs_to" -> "class_name";
  "belongs_to" -> "reflection";
  "belongs_to" -> "class_name";
  "belongs_to" -> "configure_dependency_for_belongs_to";
  "belongs_to" -> "reflection";
  "has_and_belongs_to_many" -> "reflection";
  "has_and_belongs_to_many" -> "create_has_and_belongs_to_many_reflection";
  "has_and_belongs_to_many" -> "association_id";
  "has_and_belongs_to_many" -> "options";
  "has_and_belongs_to_many" -> "extension";
  "has_and_belongs_to_many" -> "add_multiple_associated_save_callbacks";
  "has_and_belongs_to_many" -> "reflection";
  "has_and_belongs_to_many" -> "name";
  "has_and_belongs_to_many" -> "collection_accessor_methods";
  "has_and_belongs_to_many" -> "reflection";
  "has_and_belongs_to_many" -> "old_method";
  "has_and_belongs_to_many" -> "reflection";
  "has_and_belongs_to_many" -> "name";
  "has_and_belongs_to_many" -> "method_defined?";
  "has_and_belongs_to_many" -> "old_method";
  "has_and_belongs_to_many" -> "class_eval";
  "has_and_belongs_to_many" -> "old_method";
  "has_and_belongs_to_many" -> "reflection";
  "has_and_belongs_to_many" -> "name";
  "has_and_belongs_to_many" -> "old_method";
  "has_and_belongs_to_many" -> "add_association_callbacks";
  "has_and_belongs_to_many" -> "reflection";
  "has_and_belongs_to_many" -> "name";
  "has_and_belongs_to_many" -> "options";
  "join_table_name" -> "first_table_name";
  "join_table_name" -> "second_table_name";
  "join_table_name" -> "join_table";
  "join_table_name" -> "first_table_name";
  "join_table_name" -> "second_table_name";
  "join_table_name" -> "join_table";
  "join_table_name" -> "second_table_name";
  "join_table_name" -> "first_table_name";
  "join_table_name" -> "table_name_prefix";
  "join_table_name" -> "join_table";
  "join_table_name" -> "table_name_suffix";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "name";
  "association_accessor_methods" -> "define_method";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "name";
  "association_accessor_methods" -> "params";
  "association_accessor_methods" -> "params";
  "association_accessor_methods" -> "empty?";
  "association_accessor_methods" -> "force_reload";
  "association_accessor_methods" -> "params";
  "association_accessor_methods" -> "first";
  "association_accessor_methods" -> "instance_variable_defined?";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "instance_variable_get";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "nil?";
  "association_accessor_methods" -> "force_reload";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "association_proxy_class";
  "association_accessor_methods" -> "new";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "retval";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "reload";
  "association_accessor_methods" -> "retval";
  "association_accessor_methods" -> "nil?";
  "association_accessor_methods" -> "association_proxy_class";
  "association_accessor_methods" -> "instance_variable_set";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "instance_variable_set";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "target";
  "association_accessor_methods" -> "nil?";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "define_method";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "name";
  "association_accessor_methods" -> "new_value";
  "association_accessor_methods" -> "instance_variable_defined?";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "instance_variable_get";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "nil?";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "target";
  "association_accessor_methods" -> "new_value";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "association_proxy_class";
  "association_accessor_methods" -> "new";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "association_proxy_class";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "create_through_record";
  "association_accessor_methods" -> "new_value";
  "association_accessor_methods" -> "send";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "name";
  "association_accessor_methods" -> "new_value";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "replace";
  "association_accessor_methods" -> "new_value";
  "association_accessor_methods" -> "instance_variable_set";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "new_value";
  "association_accessor_methods" -> "nil?";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "define_method";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "name";
  "association_accessor_methods" -> "target";
  "association_accessor_methods" -> "target";
  "association_accessor_methods" -> "nil?";
  "association_accessor_methods" -> "association_proxy_class";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "association_proxy_class";
  "association_accessor_methods" -> "new";
  "association_accessor_methods" -> "reflection";
  "association_accessor_methods" -> "association";
  "association_accessor_methods" -> "target";
  "association_accessor_methods" -> "target";
  "association_accessor_methods" -> "instance_variable_set";
  "association_accessor_methods" -> "ivar";
  "association_accessor_methods" -> "association";
  "collection_reader_method" -> "define_method";
  "collection_reader_method" -> "reflection";
  "collection_reader_method" -> "name";
  "collection_reader_method" -> "params";
  "collection_reader_method" -> "ivar";
  "collection_reader_method" -> "reflection";
  "collection_reader_method" -> "name";
  "collection_reader_method" -> "params";
  "collection_reader_method" -> "empty?";
  "collection_reader_method" -> "force_reload";
  "collection_reader_method" -> "params";
  "collection_reader_method" -> "first";
  "collection_reader_method" -> "instance_variable_defined?";
  "collection_reader_method" -> "ivar";
  "collection_reader_method" -> "association";
  "collection_reader_method" -> "instance_variable_get";
  "collection_reader_method" -> "ivar";
  "collection_reader_method" -> "association";
  "collection_reader_method" -> "respond_to?";
  "collection_reader_method" -> "loaded?";
  "collection_reader_method" -> "association";
  "collection_reader_method" -> "association_proxy_class";
  "collection_reader_method" -> "new";
  "collection_reader_method" -> "reflection";
  "collection_reader_method" -> "instance_variable_set";
  "collection_reader_method" -> "ivar";
  "collection_reader_method" -> "association";
  "collection_reader_method" -> "force_reload";
  "collection_reader_method" -> "association";
  "collection_reader_method" -> "reload";
  "collection_reader_method" -> "association";
  "collection_reader_method" -> "define_method";
  "collection_reader_method" -> "reflection";
  "collection_reader_method" -> "name";
  "collection_reader_method" -> "to_s";
  "collection_reader_method" -> "singularize";
  "collection_reader_method" -> "send";
  "collection_reader_method" -> "reflection";
  "collection_reader_method" -> "name";
  "collection_reader_method" -> "map";
  "collection_reader_method" -> "id";
  "collection_accessor_methods" -> "collection_reader_method";
  "collection_accessor_methods" -> "reflection";
  "collection_accessor_methods" -> "association_proxy_class";
  "collection_accessor_methods" -> "writer";
  "collection_accessor_methods" -> "define_method";
  "collection_accessor_methods" -> "reflection";
  "collection_accessor_methods" -> "name";
  "collection_accessor_methods" -> "new_value";
  "collection_accessor_methods" -> "association";
  "collection_accessor_methods" -> "send";
  "collection_accessor_methods" -> "reflection";
  "collection_accessor_methods" -> "name";
  "collection_accessor_methods" -> "association";
  "collection_accessor_methods" -> "replace";
  "collection_accessor_methods" -> "new_value";
  "collection_accessor_methods" -> "association";
  "collection_accessor_methods" -> "define_method";
  "collection_accessor_methods" -> "reflection";
  "collection_accessor_methods" -> "name";
  "collection_accessor_methods" -> "to_s";
  "collection_accessor_methods" -> "singularize";
  "collection_accessor_methods" -> "new_value";
  "collection_accessor_methods" -> "ids";
  "collection_accessor_methods" -> "new_value";
  "collection_accessor_methods" -> "reject";
  "collection_accessor_methods" -> "nid";
  "collection_accessor_methods" -> "nid";
  "collection_accessor_methods" -> "blank?";
  "collection_accessor_methods" -> "send";
  "collection_accessor_methods" -> "reflection";
  "collection_accessor_methods" -> "name";
  "collection_accessor_methods" -> "reflection";
  "collection_accessor_methods" -> "class_name";
  "collection_accessor_methods" -> "constantize";
  "collection_accessor_methods" -> "find";
  "collection_accessor_methods" -> "ids";
  "add_single_associated_save_callbacks" -> "method_name";
  "add_single_associated_save_callbacks" -> "association_name";
  "add_single_associated_save_callbacks" -> "to_sym";
  "add_single_associated_save_callbacks" -> "define_method";
  "add_single_associated_save_callbacks" -> "method_name";
  "add_single_associated_save_callbacks" -> "association";
  "add_single_associated_save_callbacks" -> "instance_variable_get";
  "add_single_associated_save_callbacks" -> "association_name";
  "add_single_associated_save_callbacks" -> "association";
  "add_single_associated_save_callbacks" -> "nil?";
  "add_single_associated_save_callbacks" -> "association";
  "add_single_associated_save_callbacks" -> "target";
  "add_single_associated_save_callbacks" -> "nil?";
  "add_single_associated_save_callbacks" -> "association";
  "add_single_associated_save_callbacks" -> "valid?";
  "add_single_associated_save_callbacks" -> "errors";
  "add_single_associated_save_callbacks" -> "add";
  "add_single_associated_save_callbacks" -> "association_name";
  "add_single_associated_save_callbacks" -> "validate";
  "add_single_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "association_name";
  "add_multiple_associated_save_callbacks" -> "to_sym";
  "add_multiple_associated_save_callbacks" -> "ivar";
  "add_multiple_associated_save_callbacks" -> "association_name";
  "add_multiple_associated_save_callbacks" -> "define_method";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "instance_variable_defined?";
  "add_multiple_associated_save_callbacks" -> "ivar";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "instance_variable_get";
  "add_multiple_associated_save_callbacks" -> "ivar";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "respond_to?";
  "add_multiple_associated_save_callbacks" -> "loaded?";
  "add_multiple_associated_save_callbacks" -> "new_record?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "loaded?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "select";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "new_record?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "target";
  "add_multiple_associated_save_callbacks" -> "select";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "new_record?";
  "add_multiple_associated_save_callbacks" -> "each";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "valid?";
  "add_multiple_associated_save_callbacks" -> "errors";
  "add_multiple_associated_save_callbacks" -> "add";
  "add_multiple_associated_save_callbacks" -> "association_name";
  "add_multiple_associated_save_callbacks" -> "validate";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "association_name";
  "add_multiple_associated_save_callbacks" -> "to_sym";
  "add_multiple_associated_save_callbacks" -> "define_method";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "new_record?";
  "add_multiple_associated_save_callbacks" -> "before_save";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "association_name";
  "add_multiple_associated_save_callbacks" -> "to_sym";
  "add_multiple_associated_save_callbacks" -> "define_method";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "instance_variable_defined?";
  "add_multiple_associated_save_callbacks" -> "ivar";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "instance_variable_get";
  "add_multiple_associated_save_callbacks" -> "ivar";
  "add_multiple_associated_save_callbacks" -> "records_to_save";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "respond_to?";
  "add_multiple_associated_save_callbacks" -> "loaded?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "loaded?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "select";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "new_record?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "respond_to?";
  "add_multiple_associated_save_callbacks" -> "loaded?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "loaded?";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "target";
  "add_multiple_associated_save_callbacks" -> "select";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "new_record?";
  "add_multiple_associated_save_callbacks" -> "records_to_save";
  "add_multiple_associated_save_callbacks" -> "blank?";
  "add_multiple_associated_save_callbacks" -> "records_to_save";
  "add_multiple_associated_save_callbacks" -> "each";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "send";
  "add_multiple_associated_save_callbacks" -> "insert_record";
  "add_multiple_associated_save_callbacks" -> "record";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "respond_to?";
  "add_multiple_associated_save_callbacks" -> "construct_sql";
  "add_multiple_associated_save_callbacks" -> "association";
  "add_multiple_associated_save_callbacks" -> "send";
  "add_multiple_associated_save_callbacks" -> "construct_sql";
  "add_multiple_associated_save_callbacks" -> "after_create";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "add_multiple_associated_save_callbacks" -> "after_update";
  "add_multiple_associated_save_callbacks" -> "method_name";
  "association_constructor_method" -> "define_method";
  "association_constructor_method" -> "constructor";
  "association_constructor_method" -> "reflection";
  "association_constructor_method" -> "name";
  "association_constructor_method" -> "params";
  "association_constructor_method" -> "ivar";
  "association_constructor_method" -> "reflection";
  "association_constructor_method" -> "name";
  "association_constructor_method" -> "params";
  "association_constructor_method" -> "empty?";
  "association_constructor_method" -> "attributees";
  "association_constructor_method" -> "params";
  "association_constructor_method" -> "first";
  "association_constructor_method" -> "replace_existing";
  "association_constructor_method" -> "params";
  "association_constructor_method" -> "nil?";
  "association_constructor_method" -> "params";
  "association_constructor_method" -> "instance_variable_defined?";
  "association_constructor_method" -> "ivar";
  "association_constructor_method" -> "association";
  "association_constructor_method" -> "instance_variable_get";
  "association_constructor_method" -> "ivar";
  "association_constructor_method" -> "association";
  "association_constructor_method" -> "nil?";
  "association_constructor_method" -> "association";
  "association_constructor_method" -> "association_proxy_class";
  "association_constructor_method" -> "new";
  "association_constructor_method" -> "reflection";
  "association_constructor_method" -> "instance_variable_set";
  "association_constructor_method" -> "ivar";
  "association_constructor_method" -> "association";
  "association_constructor_method" -> "association_proxy_class";
  "association_constructor_method" -> "association";
  "association_constructor_method" -> "send";
  "association_constructor_method" -> "constructor";
  "association_constructor_method" -> "attributees";
  "association_constructor_method" -> "replace_existing";
  "association_constructor_method" -> "association";
  "association_constructor_method" -> "send";
  "association_constructor_method" -> "constructor";
  "association_constructor_method" -> "attributees";
  "find_with_associations" -> "catch";
  "find_with_associations" -> "invalid_query";
  "find_with_associations" -> "join_dependency";
  "find_with_associations" -> "new";
  "find_with_associations" -> "merge_includes";
  "find_with_associations" -> "scope";
  "find_with_associations" -> "find";
  "find_with_associations" -> "include";
  "find_with_associations" -> "options";
  "find_with_associations" -> "include";
  "find_with_associations" -> "options";
  "find_with_associations" -> "joins";
  "find_with_associations" -> "rows";
  "find_with_associations" -> "select_all_rows";
  "find_with_associations" -> "options";
  "find_with_associations" -> "join_dependency";
  "find_with_associations" -> "join_dependency";
  "find_with_associations" -> "instantiate";
  "find_with_associations" -> "rows";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "include?";
  "configure_dependency_for_has_many" -> "dependent";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "primary_key_name";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "as";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "as";
  "configure_dependency_for_has_many" -> "base_class";
  "configure_dependency_for_has_many" -> "name";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "conditions";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "sanitize_sql";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "conditions";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "collect";
  "configure_dependency_for_has_many" -> "where";
  "configure_dependency_for_has_many" -> "where";
  "configure_dependency_for_has_many" -> "join";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "dependent";
  "configure_dependency_for_has_many" -> "destroy";
  "configure_dependency_for_has_many" -> "method_name";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "name";
  "configure_dependency_for_has_many" -> "to_sym";
  "configure_dependency_for_has_many" -> "define_method";
  "configure_dependency_for_has_many" -> "method_name";
  "configure_dependency_for_has_many" -> "send";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "name";
  "configure_dependency_for_has_many" -> "each";
  "configure_dependency_for_has_many" -> "o";
  "configure_dependency_for_has_many" -> "o";
  "configure_dependency_for_has_many" -> "destroy";
  "configure_dependency_for_has_many" -> "before_destroy";
  "configure_dependency_for_has_many" -> "method_name";
  "configure_dependency_for_has_many" -> "delete_all";
  "configure_dependency_for_has_many" -> "module_eval";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "class_name";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "nullify";
  "configure_dependency_for_has_many" -> "module_eval";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "class_name";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "primary_key_name";
  "configure_dependency_for_has_many" -> "dependent_conditions";
  "configure_dependency_for_has_many" -> "raise";
  "configure_dependency_for_has_many" -> "reflection";
  "configure_dependency_for_has_many" -> "options";
  "configure_dependency_for_has_many" -> "dependent";
  "configure_dependency_for_has_many" -> "inspect";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "options";
  "configure_dependency_for_has_one" -> "include?";
  "configure_dependency_for_has_one" -> "dependent";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "options";
  "configure_dependency_for_has_one" -> "dependent";
  "configure_dependency_for_has_one" -> "destroy";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "name";
  "configure_dependency_for_has_one" -> "to_sym";
  "configure_dependency_for_has_one" -> "define_method";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "send";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "name";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "nil?";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "destroy";
  "configure_dependency_for_has_one" -> "before_destroy";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "delete";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "name";
  "configure_dependency_for_has_one" -> "to_sym";
  "configure_dependency_for_has_one" -> "define_method";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "send";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "name";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "nil?";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "class";
  "configure_dependency_for_has_one" -> "delete";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "id";
  "configure_dependency_for_has_one" -> "before_destroy";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "nullify";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "name";
  "configure_dependency_for_has_one" -> "to_sym";
  "configure_dependency_for_has_one" -> "define_method";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "send";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "name";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "nil?";
  "configure_dependency_for_has_one" -> "association";
  "configure_dependency_for_has_one" -> "update_attribute";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "primary_key_name";
  "configure_dependency_for_has_one" -> "before_destroy";
  "configure_dependency_for_has_one" -> "method_name";
  "configure_dependency_for_has_one" -> "raise";
  "configure_dependency_for_has_one" -> "reflection";
  "configure_dependency_for_has_one" -> "options";
  "configure_dependency_for_has_one" -> "dependent";
  "configure_dependency_for_has_one" -> "inspect";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "options";
  "configure_dependency_for_belongs_to" -> "include?";
  "configure_dependency_for_belongs_to" -> "dependent";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "options";
  "configure_dependency_for_belongs_to" -> "dependent";
  "configure_dependency_for_belongs_to" -> "destroy";
  "configure_dependency_for_belongs_to" -> "method_name";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "name";
  "configure_dependency_for_belongs_to" -> "to_sym";
  "configure_dependency_for_belongs_to" -> "define_method";
  "configure_dependency_for_belongs_to" -> "method_name";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "send";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "name";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "nil?";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "destroy";
  "configure_dependency_for_belongs_to" -> "before_destroy";
  "configure_dependency_for_belongs_to" -> "method_name";
  "configure_dependency_for_belongs_to" -> "delete";
  "configure_dependency_for_belongs_to" -> "method_name";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "name";
  "configure_dependency_for_belongs_to" -> "to_sym";
  "configure_dependency_for_belongs_to" -> "define_method";
  "configure_dependency_for_belongs_to" -> "method_name";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "send";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "name";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "nil?";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "class";
  "configure_dependency_for_belongs_to" -> "delete";
  "configure_dependency_for_belongs_to" -> "association";
  "configure_dependency_for_belongs_to" -> "id";
  "configure_dependency_for_belongs_to" -> "before_destroy";
  "configure_dependency_for_belongs_to" -> "method_name";
  "configure_dependency_for_belongs_to" -> "raise";
  "configure_dependency_for_belongs_to" -> "reflection";
  "configure_dependency_for_belongs_to" -> "options";
  "configure_dependency_for_belongs_to" -> "dependent";
  "configure_dependency_for_belongs_to" -> "inspect";
  "create_has_many_reflection" -> "options";
  "create_has_many_reflection" -> "assert_valid_keys";
  "create_has_many_reflection" -> "class_name";
  "create_has_many_reflection" -> "table_name";
  "create_has_many_reflection" -> "foreign_key";
  "create_has_many_reflection" -> "dependent";
  "create_has_many_reflection" -> "select";
  "create_has_many_reflection" -> "conditions";
  "create_has_many_reflection" -> "include";
  "create_has_many_reflection" -> "order";
  "create_has_many_reflection" -> "group";
  "create_has_many_reflection" -> "limit";
  "create_has_many_reflection" -> "offset";
  "create_has_many_reflection" -> "as";
  "create_has_many_reflection" -> "through";
  "create_has_many_reflection" -> "source";
  "create_has_many_reflection" -> "source_type";
  "create_has_many_reflection" -> "uniq";
  "create_has_many_reflection" -> "finder_sql";
  "create_has_many_reflection" -> "counter_sql";
  "create_has_many_reflection" -> "before_add";
  "create_has_many_reflection" -> "after_add";
  "create_has_many_reflection" -> "before_remove";
  "create_has_many_reflection" -> "after_remove";
  "create_has_many_reflection" -> "extend";
  "create_has_many_reflection" -> "readonly";
  "create_has_many_reflection" -> "options";
  "create_has_many_reflection" -> "extend";
  "create_has_many_reflection" -> "create_extension_modules";
  "create_has_many_reflection" -> "association_id";
  "create_has_many_reflection" -> "extension";
  "create_has_many_reflection" -> "options";
  "create_has_many_reflection" -> "extend";
  "create_has_many_reflection" -> "create_reflection";
  "create_has_many_reflection" -> "has_many";
  "create_has_many_reflection" -> "association_id";
  "create_has_many_reflection" -> "options";
  "create_has_one_reflection" -> "options";
  "create_has_one_reflection" -> "assert_valid_keys";
  "create_has_one_reflection" -> "class_name";
  "create_has_one_reflection" -> "foreign_key";
  "create_has_one_reflection" -> "remote";
  "create_has_one_reflection" -> "conditions";
  "create_has_one_reflection" -> "order";
  "create_has_one_reflection" -> "include";
  "create_has_one_reflection" -> "dependent";
  "create_has_one_reflection" -> "counter_cache";
  "create_has_one_reflection" -> "extend";
  "create_has_one_reflection" -> "as";
  "create_has_one_reflection" -> "readonly";
  "create_has_one_reflection" -> "create_reflection";
  "create_has_one_reflection" -> "has_one";
  "create_has_one_reflection" -> "association_id";
  "create_has_one_reflection" -> "options";
  "create_has_one_through_reflection" -> "options";
  "create_has_one_through_reflection" -> "assert_valid_keys";
  "create_has_one_through_reflection" -> "class_name";
  "create_has_one_through_reflection" -> "foreign_key";
  "create_has_one_through_reflection" -> "remote";
  "create_has_one_through_reflection" -> "conditions";
  "create_has_one_through_reflection" -> "order";
  "create_has_one_through_reflection" -> "include";
  "create_has_one_through_reflection" -> "dependent";
  "create_has_one_through_reflection" -> "counter_cache";
  "create_has_one_through_reflection" -> "extend";
  "create_has_one_through_reflection" -> "as";
  "create_has_one_through_reflection" -> "through";
  "create_has_one_through_reflection" -> "source";
  "create_has_one_through_reflection" -> "source_type";
  "create_has_one_through_reflection" -> "create_reflection";
  "create_has_one_through_reflection" -> "has_one";
  "create_has_one_through_reflection" -> "association_id";
  "create_has_one_through_reflection" -> "options";
  "create_belongs_to_reflection" -> "options";
  "create_belongs_to_reflection" -> "assert_valid_keys";
  "create_belongs_to_reflection" -> "class_name";
  "create_belongs_to_reflection" -> "foreign_key";
  "create_belongs_to_reflection" -> "foreign_type";
  "create_belongs_to_reflection" -> "remote";
  "create_belongs_to_reflection" -> "conditions";
  "create_belongs_to_reflection" -> "order";
  "create_belongs_to_reflection" -> "include";
  "create_belongs_to_reflection" -> "dependent";
  "create_belongs_to_reflection" -> "counter_cache";
  "create_belongs_to_reflection" -> "extend";
  "create_belongs_to_reflection" -> "polymorphic";
  "create_belongs_to_reflection" -> "readonly";
  "create_belongs_to_reflection" -> "reflection";
  "create_belongs_to_reflection" -> "create_reflection";
  "create_belongs_to_reflection" -> "belongs_to";
  "create_belongs_to_reflection" -> "association_id";
  "create_belongs_to_reflection" -> "options";
  "create_belongs_to_reflection" -> "options";
  "create_belongs_to_reflection" -> "polymorphic";
  "create_belongs_to_reflection" -> "reflection";
  "create_belongs_to_reflection" -> "options";
  "create_belongs_to_reflection" -> "foreign_type";
  "create_belongs_to_reflection" -> "reflection";
  "create_belongs_to_reflection" -> "class_name";
  "create_belongs_to_reflection" -> "underscore";
  "create_belongs_to_reflection" -> "reflection";
  "create_has_and_belongs_to_many_reflection" -> "options";
  "create_has_and_belongs_to_many_reflection" -> "assert_valid_keys";
  "create_has_and_belongs_to_many_reflection" -> "class_name";
  "create_has_and_belongs_to_many_reflection" -> "table_name";
  "create_has_and_belongs_to_many_reflection" -> "join_table";
  "create_has_and_belongs_to_many_reflection" -> "foreign_key";
  "create_has_and_belongs_to_many_reflection" -> "association_foreign_key";
  "create_has_and_belongs_to_many_reflection" -> "select";
  "create_has_and_belongs_to_many_reflection" -> "conditions";
  "create_has_and_belongs_to_many_reflection" -> "include";
  "create_has_and_belongs_to_many_reflection" -> "order";
  "create_has_and_belongs_to_many_reflection" -> "group";
  "create_has_and_belongs_to_many_reflection" -> "limit";
  "create_has_and_belongs_to_many_reflection" -> "offset";
  "create_has_and_belongs_to_many_reflection" -> "uniq";
  "create_has_and_belongs_to_many_reflection" -> "finder_sql";
  "create_has_and_belongs_to_many_reflection" -> "delete_sql";
  "create_has_and_belongs_to_many_reflection" -> "insert_sql";
  "create_has_and_belongs_to_many_reflection" -> "before_add";
  "create_has_and_belongs_to_many_reflection" -> "after_add";
  "create_has_and_belongs_to_many_reflection" -> "before_remove";
  "create_has_and_belongs_to_many_reflection" -> "after_remove";
  "create_has_and_belongs_to_many_reflection" -> "extend";
  "create_has_and_belongs_to_many_reflection" -> "readonly";
  "create_has_and_belongs_to_many_reflection" -> "options";
  "create_has_and_belongs_to_many_reflection" -> "extend";
  "create_has_and_belongs_to_many_reflection" -> "create_extension_modules";
  "create_has_and_belongs_to_many_reflection" -> "association_id";
  "create_has_and_belongs_to_many_reflection" -> "extension";
  "create_has_and_belongs_to_many_reflection" -> "options";
  "create_has_and_belongs_to_many_reflection" -> "extend";
  "create_has_and_belongs_to_many_reflection" -> "reflection";
  "create_has_and_belongs_to_many_reflection" -> "create_reflection";
  "create_has_and_belongs_to_many_reflection" -> "has_and_belongs_to_many";
  "create_has_and_belongs_to_many_reflection" -> "association_id";
  "create_has_and_belongs_to_many_reflection" -> "options";
  "create_has_and_belongs_to_many_reflection" -> "reflection";
  "create_has_and_belongs_to_many_reflection" -> "options";
  "create_has_and_belongs_to_many_reflection" -> "join_table";
  "create_has_and_belongs_to_many_reflection" -> "join_table_name";
  "create_has_and_belongs_to_many_reflection" -> "undecorated_table_name";
  "create_has_and_belongs_to_many_reflection" -> "to_s";
  "create_has_and_belongs_to_many_reflection" -> "undecorated_table_name";
  "create_has_and_belongs_to_many_reflection" -> "reflection";
  "create_has_and_belongs_to_many_reflection" -> "class_name";
  "create_has_and_belongs_to_many_reflection" -> "reflection";
  "reflect_on_included_associations" -> "associations";
  "reflect_on_included_associations" -> "flatten";
  "reflect_on_included_associations" -> "collect";
  "reflect_on_included_associations" -> "association";
  "reflect_on_included_associations" -> "reflect_on_association";
  "reflect_on_included_associations" -> "association";
  "reflect_on_included_associations" -> "to_s";
  "reflect_on_included_associations" -> "intern";
  "guard_against_unlimitable_reflections" -> "options";
  "guard_against_unlimitable_reflections" -> "offset";
  "guard_against_unlimitable_reflections" -> "options";
  "guard_against_unlimitable_reflections" -> "limit";
  "guard_against_unlimitable_reflections" -> "using_limitable_reflections?";
  "guard_against_unlimitable_reflections" -> "reflections";
  "guard_against_unlimitable_reflections" -> "raise";
  "select_all_rows" -> "connection";
  "select_all_rows" -> "select_all";
  "select_all_rows" -> "construct_finder_sql_with_included_associations";
  "select_all_rows" -> "options";
  "select_all_rows" -> "join_dependency";
  "select_all_rows" -> "name";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "find";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "column_aliases";
  "construct_finder_sql_with_included_associations" -> "join_dependency";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "from";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "from";
  "construct_finder_sql_with_included_associations" -> "quoted_table_name";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "join_dependency";
  "construct_finder_sql_with_included_associations" -> "join_associations";
  "construct_finder_sql_with_included_associations" -> "collect";
  "construct_finder_sql_with_included_associations" -> "join";
  "construct_finder_sql_with_included_associations" -> "join";
  "construct_finder_sql_with_included_associations" -> "association_join";
  "construct_finder_sql_with_included_associations" -> "join";
  "construct_finder_sql_with_included_associations" -> "add_joins!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "add_conditions!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "conditions";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "using_limitable_reflections?";
  "construct_finder_sql_with_included_associations" -> "join_dependency";
  "construct_finder_sql_with_included_associations" -> "reflections";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "limit";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "limit";
  "construct_finder_sql_with_included_associations" -> "add_limited_ids_condition!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "join_dependency";
  "construct_finder_sql_with_included_associations" -> "add_group!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "group";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "add_order!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "order";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "using_limitable_reflections?";
  "construct_finder_sql_with_included_associations" -> "join_dependency";
  "construct_finder_sql_with_included_associations" -> "reflections";
  "construct_finder_sql_with_included_associations" -> "add_limit!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "add_lock!";
  "construct_finder_sql_with_included_associations" -> "sql";
  "construct_finder_sql_with_included_associations" -> "options";
  "construct_finder_sql_with_included_associations" -> "scope";
  "construct_finder_sql_with_included_associations" -> "sanitize_sql";
  "construct_finder_sql_with_included_associations" -> "sql";
  "add_limited_ids_condition!" -> "id_list";
  "add_limited_ids_condition!" -> "select_limited_ids_list";
  "add_limited_ids_condition!" -> "options";
  "add_limited_ids_condition!" -> "join_dependency";
  "add_limited_ids_condition!" -> "empty?";
  "add_limited_ids_condition!" -> "sql";
  "add_limited_ids_condition!" -> "condition_word";
  "add_limited_ids_condition!" -> "sql";
  "add_limited_ids_condition!" -> "connection";
  "add_limited_ids_condition!" -> "quote_table_name";
  "add_limited_ids_condition!" -> "table_name";
  "add_limited_ids_condition!" -> "primary_key";
  "add_limited_ids_condition!" -> "id_list";
  "add_limited_ids_condition!" -> "throw";
  "add_limited_ids_condition!" -> "invalid_query";
  "select_limited_ids_list" -> "pk";
  "select_limited_ids_list" -> "columns_hash";
  "select_limited_ids_list" -> "primary_key";
  "select_limited_ids_list" -> "connection";
  "select_limited_ids_list" -> "select_all";
  "select_limited_ids_list" -> "construct_finder_sql_for_association_limiting";
  "select_limited_ids_list" -> "options";
  "select_limited_ids_list" -> "join_dependency";
  "select_limited_ids_list" -> "name";
  "select_limited_ids_list" -> "collect";
  "select_limited_ids_list" -> "row";
  "select_limited_ids_list" -> "connection";
  "select_limited_ids_list" -> "quote";
  "select_limited_ids_list" -> "row";
  "select_limited_ids_list" -> "primary_key";
  "select_limited_ids_list" -> "pk";
  "select_limited_ids_list" -> "join";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "find";
  "construct_finder_sql_for_association_limiting" -> "tables_from_conditions";
  "construct_finder_sql_for_association_limiting" -> "conditions_tables";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "tables_from_order";
  "construct_finder_sql_for_association_limiting" -> "order_tables";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "all_tables";
  "construct_finder_sql_for_association_limiting" -> "tables_from_conditions";
  "construct_finder_sql_for_association_limiting" -> "tables_from_order";
  "construct_finder_sql_for_association_limiting" -> "distinct_join_associations";
  "construct_finder_sql_for_association_limiting" -> "all_tables";
  "construct_finder_sql_for_association_limiting" -> "uniq";
  "construct_finder_sql_for_association_limiting" -> "map";
  "construct_finder_sql_for_association_limiting" -> "table";
  "construct_finder_sql_for_association_limiting" -> "join_dependency";
  "construct_finder_sql_for_association_limiting" -> "joins_for_table_name";
  "construct_finder_sql_for_association_limiting" -> "table";
  "construct_finder_sql_for_association_limiting" -> "flatten";
  "construct_finder_sql_for_association_limiting" -> "compact";
  "construct_finder_sql_for_association_limiting" -> "uniq";
  "construct_finder_sql_for_association_limiting" -> "is_distinct";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "joins";
  "construct_finder_sql_for_association_limiting" -> "blank?";
  "construct_finder_sql_for_association_limiting" -> "include_eager_conditions?";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "tables_from_conditions";
  "construct_finder_sql_for_association_limiting" -> "include_eager_order?";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "tables_from_order";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "is_distinct";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "connection";
  "construct_finder_sql_for_association_limiting" -> "distinct";
  "construct_finder_sql_for_association_limiting" -> "connection";
  "construct_finder_sql_for_association_limiting" -> "quote_table_name";
  "construct_finder_sql_for_association_limiting" -> "table_name";
  "construct_finder_sql_for_association_limiting" -> "primary_key";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "order";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "primary_key";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "connection";
  "construct_finder_sql_for_association_limiting" -> "quote_table_name";
  "construct_finder_sql_for_association_limiting" -> "table_name";
  "construct_finder_sql_for_association_limiting" -> "is_distinct";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "distinct_join_associations";
  "construct_finder_sql_for_association_limiting" -> "collect";
  "construct_finder_sql_for_association_limiting" -> "association_join";
  "construct_finder_sql_for_association_limiting" -> "join";
  "construct_finder_sql_for_association_limiting" -> "add_joins!";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "add_conditions!";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "conditions";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "add_group!";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "group";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "order";
  "construct_finder_sql_for_association_limiting" -> "is_distinct";
  "construct_finder_sql_for_association_limiting" -> "connection";
  "construct_finder_sql_for_association_limiting" -> "add_order_by_for_association_limiting!";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "add_order!";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "order";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "add_limit!";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "construct_finder_sql_for_association_limiting" -> "options";
  "construct_finder_sql_for_association_limiting" -> "scope";
  "construct_finder_sql_for_association_limiting" -> "sanitize_sql";
  "construct_finder_sql_for_association_limiting" -> "sql";
  "conditions_tables" -> "conditions";
  "conditions_tables" -> "scope";
  "conditions_tables" -> "find";
  "conditions_tables" -> "conditions";
  "conditions_tables" -> "options";
  "conditions_tables" -> "conditions";
  "conditions_tables" -> "inject";
  "conditions_tables" -> "all";
  "conditions_tables" -> "cond";
  "conditions_tables" -> "cond";
  "conditions_tables" -> "all";
  "conditions_tables" -> "all";
  "conditions_tables" -> "cond";
  "conditions_tables" -> "first";
  "conditions_tables" -> "all";
  "conditions_tables" -> "cond";
  "conditions_tables" -> "conditions";
  "conditions_tables" -> "join";
  "conditions_tables" -> "scan";
  "conditions_tables" -> "flatten";
  "order_tables" -> "order";
  "order_tables" -> "options";
  "order_tables" -> "order";
  "order_tables" -> "order";
  "order_tables" -> "order";
  "order_tables" -> "is_a?";
  "order_tables" -> "order";
  "order_tables" -> "scan";
  "order_tables" -> "flatten";
  "include_eager_conditions?" -> "tables";
  "include_eager_conditions?" -> "conditions_tables";
  "include_eager_conditions?" -> "options";
  "include_eager_conditions?" -> "tables";
  "include_eager_conditions?" -> "any?";
  "include_eager_conditions?" -> "tables";
  "include_eager_conditions?" -> "any?";
  "include_eager_conditions?" -> "condition_table_name";
  "include_eager_conditions?" -> "condition_table_name";
  "include_eager_conditions?" -> "table_name";
  "include_eager_order?" -> "tables";
  "include_eager_order?" -> "order_tables";
  "include_eager_order?" -> "options";
  "include_eager_order?" -> "tables";
  "include_eager_order?" -> "any?";
  "include_eager_order?" -> "tables";
  "include_eager_order?" -> "any?";
  "include_eager_order?" -> "order_table_name";
  "include_eager_order?" -> "order_table_name";
  "include_eager_order?" -> "table_name";
  "references_eager_loaded_tables?" -> "include_eager_order?";
  "references_eager_loaded_tables?" -> "options";
  "references_eager_loaded_tables?" -> "include_eager_conditions?";
  "references_eager_loaded_tables?" -> "options";
  "using_limitable_reflections?" -> "reflections";
  "using_limitable_reflections?" -> "reject";
  "using_limitable_reflections?" -> "r";
  "using_limitable_reflections?" -> "belongs_to";
  "using_limitable_reflections?" -> "has_one";
  "using_limitable_reflections?" -> "include?";
  "using_limitable_reflections?" -> "r";
  "using_limitable_reflections?" -> "macro";
  "using_limitable_reflections?" -> "length";
  "using_limitable_reflections?" -> "zero?";
  "column_aliases" -> "join_dependency";
  "column_aliases" -> "joins";
  "column_aliases" -> "collect";
  "column_aliases" -> "join";
  "column_aliases" -> "join";
  "column_aliases" -> "column_names_with_alias";
  "column_aliases" -> "collect";
  "column_aliases" -> "column_name";
  "column_aliases" -> "aliased_name";
  "column_aliases" -> "connection";
  "column_aliases" -> "quote_table_name";
  "column_aliases" -> "join";
  "column_aliases" -> "aliased_table_name";
  "column_aliases" -> "connection";
  "column_aliases" -> "quote_column_name";
  "column_aliases" -> "column_name";
  "column_aliases" -> "aliased_name";
  "column_aliases" -> "flatten";
  "column_aliases" -> "join";
  "add_association_callbacks" -> "callbacks";
  "add_association_callbacks" -> "callbacks";
  "add_association_callbacks" -> "each";
  "add_association_callbacks" -> "callback_name";
  "add_association_callbacks" -> "full_callback_name";
  "add_association_callbacks" -> "callback_name";
  "add_association_callbacks" -> "association_name";
  "add_association_callbacks" -> "defined_callbacks";
  "add_association_callbacks" -> "options";
  "add_association_callbacks" -> "callback_name";
  "add_association_callbacks" -> "to_sym";
  "add_association_callbacks" -> "options";
  "add_association_callbacks" -> "has_key?";
  "add_association_callbacks" -> "callback_name";
  "add_association_callbacks" -> "to_sym";
  "add_association_callbacks" -> "class_inheritable_reader";
  "add_association_callbacks" -> "full_callback_name";
  "add_association_callbacks" -> "to_sym";
  "add_association_callbacks" -> "write_inheritable_attribute";
  "add_association_callbacks" -> "full_callback_name";
  "add_association_callbacks" -> "to_sym";
  "add_association_callbacks" -> "defined_callbacks";
  "add_association_callbacks" -> "flatten";
  "add_association_callbacks" -> "write_inheritable_attribute";
  "add_association_callbacks" -> "full_callback_name";
  "add_association_callbacks" -> "to_sym";
  "condition_word" -> "sql";
  "create_extension_modules" -> "block_extension";
  "create_extension_modules" -> "extension_module_name";
  "create_extension_modules" -> "to_s";
  "create_extension_modules" -> "association_id";
  "create_extension_modules" -> "to_s";
  "create_extension_modules" -> "camelize";
  "create_extension_modules" -> "silence_warnings";
  "create_extension_modules" -> "const_set";
  "create_extension_modules" -> "extension_module_name";
  "create_extension_modules" -> "new";
  "create_extension_modules" -> "block_extension";
  "create_extension_modules" -> "extensions";
  "create_extension_modules" -> "push";
  "create_extension_modules" -> "extension_module_name";
  "create_extension_modules" -> "constantize";
  "create_extension_modules" -> "extensions";
  "initialize" -> "new";
  "initialize" -> "base";
  "initialize" -> "joins";
  "initialize" -> "associations";
  "initialize" -> "new";
  "initialize" -> "aliases";
  "initialize" -> "table";
  "initialize" -> "aliases";
  "initialize" -> "table";
  "initialize" -> "base";
  "initialize" -> "table_name";
  "initialize" -> "build";
  "initialize" -> "associations";
  "join_associations" -> "to_a";
  "instantiate" -> "rows";
  "instantiate" -> "each_with_index";
  "instantiate" -> "row";
  "instantiate" -> "i";
  "instantiate" -> "primary_id";
  "instantiate" -> "join_base";
  "instantiate" -> "record_id";
  "instantiate" -> "row";
  "instantiate" -> "primary_id";
  "instantiate" -> "primary_id";
  "instantiate" -> "join_base";
  "instantiate" -> "instantiate";
  "instantiate" -> "row";
  "instantiate" -> "construct";
  "instantiate" -> "primary_id";
  "instantiate" -> "join_associations";
  "instantiate" -> "dup";
  "instantiate" -> "row";
  "instantiate" -> "remove_duplicate_results!";
  "instantiate" -> "join_base";
  "instantiate" -> "active_record";
  "remove_duplicate_results!" -> "associations";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "base";
  "remove_duplicate_results!" -> "reflections";
  "remove_duplicate_results!" -> "associations";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "has_many";
  "remove_duplicate_results!" -> "has_and_belongs_to_many";
  "remove_duplicate_results!" -> "include?";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "macro";
  "remove_duplicate_results!" -> "records";
  "remove_duplicate_results!" -> "each";
  "remove_duplicate_results!" -> "record";
  "remove_duplicate_results!" -> "record";
  "remove_duplicate_results!" -> "send";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "name";
  "remove_duplicate_results!" -> "target";
  "remove_duplicate_results!" -> "uniq!";
  "remove_duplicate_results!" -> "associations";
  "remove_duplicate_results!" -> "each";
  "remove_duplicate_results!" -> "association";
  "remove_duplicate_results!" -> "remove_duplicate_results!";
  "remove_duplicate_results!" -> "base";
  "remove_duplicate_results!" -> "records";
  "remove_duplicate_results!" -> "association";
  "remove_duplicate_results!" -> "associations";
  "remove_duplicate_results!" -> "keys";
  "remove_duplicate_results!" -> "each";
  "remove_duplicate_results!" -> "name";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "base";
  "remove_duplicate_results!" -> "reflections";
  "remove_duplicate_results!" -> "name";
  "remove_duplicate_results!" -> "is_collection";
  "remove_duplicate_results!" -> "has_many";
  "remove_duplicate_results!" -> "has_and_belongs_to_many";
  "remove_duplicate_results!" -> "include?";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "macro";
  "remove_duplicate_results!" -> "parent_records";
  "remove_duplicate_results!" -> "records";
  "remove_duplicate_results!" -> "map";
  "remove_duplicate_results!" -> "record";
  "remove_duplicate_results!" -> "descendant";
  "remove_duplicate_results!" -> "record";
  "remove_duplicate_results!" -> "send";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "name";
  "remove_duplicate_results!" -> "descendant";
  "remove_duplicate_results!" -> "is_collection";
  "remove_duplicate_results!" -> "descendant";
  "remove_duplicate_results!" -> "target";
  "remove_duplicate_results!" -> "uniq!";
  "remove_duplicate_results!" -> "descendant";
  "remove_duplicate_results!" -> "flatten";
  "remove_duplicate_results!" -> "compact";
  "remove_duplicate_results!" -> "parent_records";
  "remove_duplicate_results!" -> "empty?";
  "remove_duplicate_results!" -> "remove_duplicate_results!";
  "remove_duplicate_results!" -> "reflection";
  "remove_duplicate_results!" -> "class_name";
  "remove_duplicate_results!" -> "constantize";
  "remove_duplicate_results!" -> "parent_records";
  "remove_duplicate_results!" -> "associations";
  "remove_duplicate_results!" -> "name";
  "join_for_table_name" -> "select";
  "join_for_table_name" -> "j";
  "join_for_table_name" -> "j";
  "join_for_table_name" -> "aliased_table_name";
  "join_for_table_name" -> "table_name";
  "join_for_table_name" -> "gsub";
  "join_for_table_name" -> "first";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "join_for_table_name";
  "joins_for_table_name" -> "table_name";
  "joins_for_table_name" -> "result";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "is_a?";
  "joins_for_table_name" -> "result";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "parent";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "parent";
  "joins_for_table_name" -> "is_a?";
  "joins_for_table_name" -> "result";
  "joins_for_table_name" -> "joins_for_table_name";
  "joins_for_table_name" -> "join";
  "joins_for_table_name" -> "parent";
  "joins_for_table_name" -> "aliased_table_name";
  "joins_for_table_name" -> "result";
  "joins_for_table_name" -> "result";
  "build" -> "parent";
  "build" -> "last";
  "build" -> "associations";
  "build" -> "reflection";
  "build" -> "parent";
  "build" -> "reflections";
  "build" -> "associations";
  "build" -> "to_s";
  "build" -> "intern";
  "build" -> "raise";
  "build" -> "associations";
  "build" -> "reflection";
  "build" -> "build_join_association";
  "build" -> "reflection";
  "build" -> "parent";
  "build" -> "associations";
  "build" -> "each";
  "build" -> "association";
  "build" -> "build";
  "build" -> "association";
  "build" -> "parent";
  "build" -> "associations";
  "build" -> "keys";
  "build" -> "sort";
  "build" -> "a";
  "build" -> "b";
  "build" -> "a";
  "build" -> "to_s";
  "build" -> "b";
  "build" -> "to_s";
  "build" -> "each";
  "build" -> "name";
  "build" -> "build";
  "build" -> "name";
  "build" -> "parent";
  "build" -> "build";
  "build" -> "associations";
  "build" -> "name";
  "build" -> "raise";
  "build" -> "associations";
  "build" -> "inspect";
  "build_join_association" -> "new";
  "build_join_association" -> "reflection";
  "build_join_association" -> "parent";
  "construct" -> "associations";
  "construct" -> "join";
  "construct" -> "joins";
  "construct" -> "shift";
  "construct" -> "reflection";
  "construct" -> "name";
  "construct" -> "to_s";
  "construct" -> "associations";
  "construct" -> "to_s";
  "construct" -> "joins";
  "construct" -> "empty?";
  "construct" -> "raise";
  "construct" -> "construct_association";
  "construct" -> "parent";
  "construct" -> "join";
  "construct" -> "row";
  "construct" -> "associations";
  "construct" -> "each";
  "construct" -> "association";
  "construct" -> "construct";
  "construct" -> "parent";
  "construct" -> "association";
  "construct" -> "joins";
  "construct" -> "row";
  "construct" -> "associations";
  "construct" -> "keys";
  "construct" -> "sort";
  "construct" -> "a";
  "construct" -> "b";
  "construct" -> "a";
  "construct" -> "to_s";
  "construct" -> "b";
  "construct" -> "to_s";
  "construct" -> "each";
  "construct" -> "name";
  "construct" -> "association";
  "construct" -> "construct_association";
  "construct" -> "parent";
  "construct" -> "joins";
  "construct" -> "shift";
  "construct" -> "row";
  "construct" -> "association";
  "construct" -> "construct";
  "construct" -> "association";
  "construct" -> "associations";
  "construct" -> "name";
  "construct" -> "joins";
  "construct" -> "row";
  "construct" -> "raise";
  "construct" -> "associations";
  "construct" -> "inspect";
  "construct_association" -> "join";
  "construct_association" -> "reflection";
  "construct_association" -> "macro";
  "construct_association" -> "has_many";
  "construct_association" -> "has_and_belongs_to_many";
  "construct_association" -> "collection";
  "construct_association" -> "record";
  "construct_association" -> "send";
  "construct_association" -> "join";
  "construct_association" -> "reflection";
  "construct_association" -> "name";
  "construct_association" -> "collection";
  "construct_association" -> "loaded";
  "construct_association" -> "record";
  "construct_association" -> "id";
  "construct_association" -> "to_s";
  "construct_association" -> "join";
  "construct_association" -> "parent";
  "construct_association" -> "record_id";
  "construct_association" -> "row";
  "construct_association" -> "to_s";
  "construct_association" -> "row";
  "construct_association" -> "join";
  "construct_association" -> "aliased_primary_key";
  "construct_association" -> "nil?";
  "construct_association" -> "association";
  "construct_association" -> "join";
  "construct_association" -> "instantiate";
  "construct_association" -> "row";
  "construct_association" -> "collection";
  "construct_association" -> "target";
  "construct_association" -> "push";
  "construct_association" -> "association";
  "construct_association" -> "has_one";
  "construct_association" -> "record";
  "construct_association" -> "id";
  "construct_association" -> "to_s";
  "construct_association" -> "join";
  "construct_association" -> "parent";
  "construct_association" -> "record_id";
  "construct_association" -> "row";
  "construct_association" -> "to_s";
  "construct_association" -> "row";
  "construct_association" -> "join";
  "construct_association" -> "aliased_primary_key";
  "construct_association" -> "nil?";
  "construct_association" -> "association";
  "construct_association" -> "join";
  "construct_association" -> "instantiate";
  "construct_association" -> "row";
  "construct_association" -> "record";
  "construct_association" -> "send";
  "construct_association" -> "join";
  "construct_association" -> "reflection";
  "construct_association" -> "name";
  "construct_association" -> "association";
  "construct_association" -> "belongs_to";
  "construct_association" -> "record";
  "construct_association" -> "id";
  "construct_association" -> "to_s";
  "construct_association" -> "join";
  "construct_association" -> "parent";
  "construct_association" -> "record_id";
  "construct_association" -> "row";
  "construct_association" -> "to_s";
  "construct_association" -> "row";
  "construct_association" -> "join";
  "construct_association" -> "aliased_primary_key";
  "construct_association" -> "nil?";
  "construct_association" -> "association";
  "construct_association" -> "join";
  "construct_association" -> "instantiate";
  "construct_association" -> "row";
  "construct_association" -> "record";
  "construct_association" -> "send";
  "construct_association" -> "join";
  "construct_association" -> "reflection";
  "construct_association" -> "name";
  "construct_association" -> "association";
  "construct_association" -> "raise";
  "construct_association" -> "join";
  "construct_association" -> "reflection";
  "construct_association" -> "macro";
  "construct_association" -> "association";
  "initialize" -> "active_record";
  "initialize" -> "joins";
  "aliased_primary_key" -> "aliased_prefix";
  "aliased_table_name" -> "active_record";
  "aliased_table_name" -> "table_name";
  "column_names_with_alias" -> "primary_key";
  "column_names_with_alias" -> "column_names";
  "column_names_with_alias" -> "primary_key";
  "column_names_with_alias" -> "each_with_index";
  "column_names_with_alias" -> "column_name";
  "column_names_with_alias" -> "i";
  "column_names_with_alias" -> "column_name";
  "column_names_with_alias" -> "aliased_prefix";
  "column_names_with_alias" -> "i";
  "extract_record" -> "column_names_with_alias";
  "extract_record" -> "inject";
  "extract_record" -> "record";
  "extract_record" -> "cn";
  "extract_record" -> "an";
  "extract_record" -> "record";
  "extract_record" -> "cn";
  "extract_record" -> "row";
  "extract_record" -> "an";
  "extract_record" -> "record";
  "record_id" -> "row";
  "record_id" -> "aliased_primary_key";
  "instantiate" -> "record_id";
  "instantiate" -> "row";
  "instantiate" -> "active_record";
  "instantiate" -> "send";
  "instantiate" -> "instantiate";
  "instantiate" -> "extract_record";
  "instantiate" -> "row";
  "initialize" -> "reflection";
  "initialize" -> "check_validity!";
  "initialize" -> "reflection";
  "initialize" -> "options";
  "initialize" -> "polymorphic";
  "initialize" -> "raise";
  "initialize" -> "new";
  "initialize" -> "reflection";
  "initialize" -> "reflection";
  "initialize" -> "klass";
  "initialize" -> "join_dependency";
  "initialize" -> "parent";
  "initialize" -> "reflection";
  "initialize" -> "join_dependency";
  "initialize" -> "joins";
  "initialize" -> "size";
  "initialize" -> "parent";
  "initialize" -> "active_record";
  "initialize" -> "table_name";
  "initialize" -> "aliased_table_name_for";
  "initialize" -> "table_name";
  "initialize" -> "reflection";
  "initialize" -> "macro";
  "initialize" -> "has_and_belongs_to_many";
  "initialize" -> "aliased_table_name_for";
  "initialize" -> "reflection";
  "initialize" -> "options";
  "initialize" -> "join_table";
  "initialize" -> "reflection";
  "initialize" -> "macro";
  "initialize" -> "has_many";
  "initialize" -> "reflection";
  "initialize" -> "options";
  "initialize" -> "through";
  "initialize" -> "aliased_table_name_for";
  "initialize" -> "reflection";
  "initialize" -> "through_reflection";
  "initialize" -> "klass";
  "initialize" -> "table_name";
  "association_join" -> "connection";
  "association_join" -> "reflection";
  "association_join" -> "active_record";
  "association_join" -> "connection";
  "association_join" -> "join";
  "association_join" -> "reflection";
  "association_join" -> "macro";
  "association_join" -> "has_and_belongs_to_many";
  "association_join" -> "join_type";
  "association_join" -> "table_alias_for";
  "association_join" -> "options";
  "association_join" -> "join_table";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "options";
  "association_join" -> "foreign_key";
  "association_join" -> "reflection";
  "association_join" -> "active_record";
  "association_join" -> "to_s";
  "association_join" -> "foreign_key";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "parent";
  "association_join" -> "aliased_table_name";
  "association_join" -> "reflection";
  "association_join" -> "active_record";
  "association_join" -> "primary_key";
  "association_join" -> "join_type";
  "association_join" -> "table_name_and_alias";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "klass";
  "association_join" -> "primary_key";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "options";
  "association_join" -> "association_foreign_key";
  "association_join" -> "klass";
  "association_join" -> "to_s";
  "association_join" -> "foreign_key";
  "association_join" -> "has_many";
  "association_join" -> "has_one";
  "association_join" -> "reflection";
  "association_join" -> "macro";
  "association_join" -> "has_many";
  "association_join" -> "reflection";
  "association_join" -> "options";
  "association_join" -> "through";
  "association_join" -> "through_conditions";
  "association_join" -> "through_reflection";
  "association_join" -> "options";
  "association_join" -> "conditions";
  "association_join" -> "interpolate_sql";
  "association_join" -> "sanitize_sql";
  "association_join" -> "through_reflection";
  "association_join" -> "options";
  "association_join" -> "conditions";
  "association_join" -> "jt_foreign_key";
  "association_join" -> "jt_as_extra";
  "association_join" -> "jt_source_extra";
  "association_join" -> "jt_sti_extra";
  "association_join" -> "first_key";
  "association_join" -> "second_key";
  "association_join" -> "as_extra";
  "association_join" -> "through_reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "jt_foreign_key";
  "association_join" -> "through_reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "to_s";
  "association_join" -> "jt_as_extra";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "through_reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "to_s";
  "association_join" -> "klass";
  "association_join" -> "quote_value";
  "association_join" -> "parent";
  "association_join" -> "active_record";
  "association_join" -> "base_class";
  "association_join" -> "name";
  "association_join" -> "jt_foreign_key";
  "association_join" -> "through_reflection";
  "association_join" -> "primary_key_name";
  "association_join" -> "source_reflection";
  "association_join" -> "macro";
  "association_join" -> "has_many";
  "association_join" -> "source_reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "first_key";
  "association_join" -> "source_reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "second_key";
  "association_join" -> "options";
  "association_join" -> "foreign_key";
  "association_join" -> "primary_key";
  "association_join" -> "as_extra";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "source_reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "klass";
  "association_join" -> "quote_value";
  "association_join" -> "source_reflection";
  "association_join" -> "active_record";
  "association_join" -> "base_class";
  "association_join" -> "name";
  "association_join" -> "first_key";
  "association_join" -> "through_reflection";
  "association_join" -> "klass";
  "association_join" -> "base_class";
  "association_join" -> "to_s";
  "association_join" -> "foreign_key";
  "association_join" -> "second_key";
  "association_join" -> "options";
  "association_join" -> "foreign_key";
  "association_join" -> "primary_key";
  "association_join" -> "through_reflection";
  "association_join" -> "klass";
  "association_join" -> "descends_from_active_record?";
  "association_join" -> "jt_sti_extra";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "through_reflection";
  "association_join" -> "active_record";
  "association_join" -> "inheritance_column";
  "association_join" -> "through_reflection";
  "association_join" -> "klass";
  "association_join" -> "quote_value";
  "association_join" -> "through_reflection";
  "association_join" -> "klass";
  "association_join" -> "name";
  "association_join" -> "demodulize";
  "association_join" -> "belongs_to";
  "association_join" -> "first_key";
  "association_join" -> "primary_key";
  "association_join" -> "reflection";
  "association_join" -> "options";
  "association_join" -> "source_type";
  "association_join" -> "second_key";
  "association_join" -> "source_reflection";
  "association_join" -> "association_foreign_key";
  "association_join" -> "jt_source_extra";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "reflection";
  "association_join" -> "source_reflection";
  "association_join" -> "options";
  "association_join" -> "foreign_type";
  "association_join" -> "klass";
  "association_join" -> "quote_value";
  "association_join" -> "reflection";
  "association_join" -> "options";
  "association_join" -> "source_type";
  "association_join" -> "second_key";
  "association_join" -> "source_reflection";
  "association_join" -> "primary_key_name";
  "association_join" -> "join_type";
  "association_join" -> "table_alias_for";
  "association_join" -> "through_reflection";
  "association_join" -> "klass";
  "association_join" -> "table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "parent";
  "association_join" -> "aliased_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "parent";
  "association_join" -> "primary_key";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "jt_foreign_key";
  "association_join" -> "jt_as_extra";
  "association_join" -> "jt_source_extra";
  "association_join" -> "jt_sti_extra";
  "association_join" -> "join_type";
  "association_join" -> "table_name_and_alias";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "first_key";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_join_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "second_key";
  "association_join" -> "as_extra";
  "association_join" -> "reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "has_many";
  "association_join" -> "has_one";
  "association_join" -> "include?";
  "association_join" -> "reflection";
  "association_join" -> "macro";
  "association_join" -> "join_type";
  "association_join" -> "table_name_and_alias";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "parent";
  "association_join" -> "aliased_table_name";
  "association_join" -> "parent";
  "association_join" -> "primary_key";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "reflection";
  "association_join" -> "options";
  "association_join" -> "as";
  "association_join" -> "klass";
  "association_join" -> "quote_value";
  "association_join" -> "parent";
  "association_join" -> "active_record";
  "association_join" -> "base_class";
  "association_join" -> "name";
  "association_join" -> "foreign_key";
  "association_join" -> "options";
  "association_join" -> "foreign_key";
  "association_join" -> "reflection";
  "association_join" -> "active_record";
  "association_join" -> "name";
  "association_join" -> "foreign_key";
  "association_join" -> "join_type";
  "association_join" -> "table_name_and_alias";
  "association_join" -> "aliased_table_name";
  "association_join" -> "foreign_key";
  "association_join" -> "parent";
  "association_join" -> "aliased_table_name";
  "association_join" -> "parent";
  "association_join" -> "primary_key";
  "association_join" -> "belongs_to";
  "association_join" -> "join_type";
  "association_join" -> "table_name_and_alias";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "reflection";
  "association_join" -> "klass";
  "association_join" -> "primary_key";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "parent";
  "association_join" -> "aliased_table_name";
  "association_join" -> "options";
  "association_join" -> "foreign_key";
  "association_join" -> "reflection";
  "association_join" -> "primary_key_name";
  "association_join" -> "klass";
  "association_join" -> "descends_from_active_record?";
  "association_join" -> "join";
  "association_join" -> "connection";
  "association_join" -> "quote_table_name";
  "association_join" -> "aliased_table_name";
  "association_join" -> "connection";
  "association_join" -> "quote_column_name";
  "association_join" -> "klass";
  "association_join" -> "inheritance_column";
  "association_join" -> "klass";
  "association_join" -> "quote_value";
  "association_join" -> "klass";
  "association_join" -> "name";
  "association_join" -> "demodulize";
  "association_join" -> "through_reflection";
  "association_join" -> "reflection";
  "association_join" -> "each";
  "association_join" -> "ref";
  "association_join" -> "ref";
  "association_join" -> "ref";
  "association_join" -> "options";
  "association_join" -> "conditions";
  "association_join" -> "join";
  "association_join" -> "interpolate_sql";
  "association_join" -> "sanitize_sql";
  "association_join" -> "ref";
  "association_join" -> "options";
  "association_join" -> "conditions";
  "association_join" -> "join";
  "aliased_table_name_for" -> "parent";
  "aliased_table_name_for" -> "table_joins";
  "aliased_table_name_for" -> "blank?";
  "aliased_table_name_for" -> "parent";
  "aliased_table_name_for" -> "table_joins";
  "aliased_table_name_for" -> "to_s";
  "aliased_table_name_for" -> "downcase";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "downcase";
  "aliased_table_name_for" -> "table_aliases";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "table_aliases";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "zero?";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "active_record";
  "aliased_table_name_for" -> "connection";
  "aliased_table_name_for" -> "table_alias_for";
  "aliased_table_name_for" -> "pluralize";
  "aliased_table_name_for" -> "reflection";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "parent_table_name";
  "aliased_table_name_for" -> "suffix";
  "aliased_table_name_for" -> "table_index";
  "aliased_table_name_for" -> "table_aliases";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "table_aliases";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "table_index";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "active_record";
  "aliased_table_name_for" -> "connection";
  "aliased_table_name_for" -> "table_alias_length";
  "aliased_table_name_for" -> "table_index";
  "aliased_table_name_for" -> "table_aliases";
  "aliased_table_name_for" -> "name";
  "aliased_table_name_for" -> "name";
  "pluralize" -> "pluralize_table_names";
  "pluralize" -> "table_name";
  "pluralize" -> "to_s";
  "pluralize" -> "pluralize";
  "pluralize" -> "table_name";
  "table_alias_for" -> "reflection";
  "table_alias_for" -> "active_record";
  "table_alias_for" -> "connection";
  "table_alias_for" -> "quote_table_name";
  "table_alias_for" -> "table_name";
  "table_alias_for" -> "table_name";
  "table_alias_for" -> "table_alias";
  "table_alias_for" -> "table_alias";
  "table_alias_for" -> "strip";
  "table_name_and_alias" -> "table_alias_for";
  "table_name_and_alias" -> "table_name";
  "interpolate_sql" -> "instance_eval";
  "interpolate_sql" -> "sql";
  "interpolate_sql" -> "gsub";
  "build_join_association" -> "new";
  "build_join_association" -> "reflection";
  "build_join_association" -> "parent";
}
